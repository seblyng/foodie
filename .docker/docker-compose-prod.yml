services:
  foodie_frontend:
    networks:
      - foodie-network
    container_name: foodie_frontend
    hostname: foodie_frontend
    tty: true
    build:
      context: ../
      dockerfile: frontend/.docker/Dockerfile.prod
    restart: always
    volumes:
      - ../frontend:/app
    ports:
      - "4000:80"
    # depends_on:
    #   - foodie_backend

  foodie_backend:
    networks:
      - foodie-network
    container_name: foodie_backend
    hostname: foodie_backend
    build:
      context: ../
      dockerfile: backend/.docker/Dockerfile.prod
    restart: always
    depends_on:
      - postgres
    tty: true
    ports:
      - "42069:42069"
    volumes:
      - ../backend/src:/app/src
      - ../backend/migrations:/app/migrations
      - ../.db/filestorage:/.filestorage
      - ../backend/Cargo.toml:/app/Cargo.toml
    environment:
      - DATABASE_URL=$DATABASE_URL
      - GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
      - GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - BASE_URL=$BASE_URL
      - FRONTEND_URL=$FRONTEND_URL
      - AWS_URL=https://foodie.lyngjohansen.com/aws/
      - AWS_USER=$AWS_USER
      - AWS_PASSWORD=$AWS_PASSWORD

  postgres:
    networks:
      - foodie-network
    hostname: foodie_postgres
    container_name: foodie_postgres
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ../.db/foodie_db:/var/lib/postgresql/data

  foodie_minio:
    networks:
      - foodie-network
    image: quay.io/minio/minio
    container_name: foodie_minio
    hostname: foodie_minio
    ports:
      - "9000:9000" # S3-compatible API
      - "9001:9001" # Web console
    volumes:
      - ../.db/aws:/data
    environment:
      MINIO_ROOT_USER: $AWS_USER
      MINIO_ROOT_PASSWORD: $AWS_PASSWORD
    command: server /data --console-address ":9001"

networks:
  foodie-network:
    driver: bridge
